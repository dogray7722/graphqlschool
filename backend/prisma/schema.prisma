generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id            Int          @id @default(autoincrement())
  streetNumber  Int          @map("street_number")
  street        String
  unit          Int?
  city          String       @db.VarChar
  state         String       @db.VarChar
  zipCode       Int          @map("zip_code")
  createdAt     DateTime     @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime?    @db.Timestamptz(6) @map("updated_at")
  instructor    Instructor[]
  student       Student[]
}

model Course {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar
  description   String?
  startDate     DateTime     @db.Timestamptz(6) @map("start_date")
  endDate       DateTime     @db.Timestamptz(6) @map("end_date")
  courseDays    String       @db.VarChar @map("course_days")
  startTime     String       @map("start_time")
  duration      String
  semesterId    Int          @map("semester_id")
  instructorId  Int          @map("instructor_id")
  subjectId     Int          @map("subject_id")
  seats         Int
  createdAt     DateTime     @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime?     @db.Timestamptz(6) @map("updated_at")
  instructor    Instructor   @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester      Semester     @relation(fields: [semesterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject       Subject      @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollment    Enrollment[]
}

model Enrollment {
  id         Int     @id @default(autoincrement())
  studentId  Int     @map("student_id")
  courseId   Int     @map("course_id")
  course     Course  @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student    Student @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Instructor {
  id                Int                 @id @default(autoincrement())
  firstName         String              @db.VarChar @map("first_name")
  lastName          String              @db.VarChar @map("last_name")
  addressId         Int
  createdAt         DateTime            @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt         DateTime?           @db.Timestamptz(6) @map("updated_at")
  course            Course[]
  address           Address             @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorSubject InstructorSubject[]
  user              User[]
}

model InstructorSubject {
  id            Int        @id @default(autoincrement())
  instructorId  Int        @map("instructor_id")
  subjectId     Int        @map("subject_id")
  instructor    Instructor @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject       Subject    @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("Instructor_Subject")
}

model Semester {
  id         Int       @id @default(autoincrement())
  season     String    @db.VarChar
  seasonCode Int       @map("season_code")
  year       Int
  createdAt  DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt  DateTime? @db.Timestamptz(6) @map("updated_at")
  course     Course[]
}

model Student {
  id         Int          @id @default(autoincrement())
  firstName  String       @db.VarChar @map("first_name")
  lastName   String       @db.VarChar @map("last_name")
  status     String       @db.VarChar
  addressId  Int          @map("address_id")
  createdAt  DateTime     @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt  DateTime?    @db.Timestamptz(6) @map("updated_at")
  enrollment Enrollment[]
  address    Address      @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User[]
}

model Subject {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar
  createdAt         DateTime            @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt         DateTime?           @db.Timestamptz(6) @map("updated_at")
  course            Course[]
  instructorSubject InstructorSubject[]
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @db.VarChar
  password      String     @db.VarChar
  studentId     Int        @map("student_id")
  instructorId  Int        @map("instructor_id")
  createdAt     DateTime   @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt     DateTime?  @db.Timestamptz(6) @map("updated_at")
  instructor    Instructor @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student       Student    @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
